{"version":3,"sources":["components/top/weather.jsx","components/top/index.jsx","components/bottom/forcastday.jsx","components/bottom/index.jsx","App.jsx","serviceWorker.js","store.js","index.js"],"names":["Weather","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this$props","location","temp_c","text","isDay","iconURL","react_default","a","createElement","className","src","React","Component","TopSection","_this","state","isSelectLocationOpen","setState","prevState","e","locationName","target","value","eventEmitter","emit","_this2","weather_Weather","esm","_ref","ref","onClick","onToggleSelectLocation","bind","placement","_ref2","style","arrowProps","data-placement","htmlFor","id","type","placeholder","onChange","onLocationNameChange","onSelectCity","Forcastday","day","condition","icon","avgtemp_c","BottomSection","forecastdays","map","idx","forcastday_Forcastday","key","App","cityName","numForcastDays","isLoading","_this$state","URL","concat","axios","get","then","res","data","current","is_day","forecast","forecastday","catch","err","console","error","_this3","updateWeather","on","_this$state2","top_TopSection","bottom_BottomSection","Boolean","window","hostname","match","Store","EventEmitter","appName","Children","children","child","cloneElement","objectSpread","ReactDOM","render","store_Store","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.291a1b0f.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default class Weather extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const { location, temp_c, isDay, text, iconURL } = this.props;\n\n    return (\n      <div className=\"weather-container\">\n        <div className=\"header\">{location}</div>\n        <div className=\"inner-container\">\n          <div className=\"image\">\n            <img src={iconURL} />\n          </div>\n          <div className=\"current-weather\">{temp_c}Â°</div>\n        </div>\n        <div className=\"footer\">{text}</div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nimport \"./style.scss\";\n\nimport Weather from \"./weather\";\n\nimport { Manager, Reference, Popper } from \"react-popper\";\n\nexport default class TopSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isSelectLocationOpen: false\n    };\n  }\n\n  onToggleSelectLocation() {\n    this.setState(prevState => ({\n      isSelectLocationOpen: !prevState.isSelectLocationOpen\n    }));\n  }\n\n  onLocationNameChange(e) {\n    this.setState({\n      locationName: e.target.value\n    });\n  }\n\n  onSelectCity() {\n    const { locationName } = this.state;\n    const { eventEmitter } = this.props;\n    eventEmitter.emit(\"updateWeather\", locationName);\n    this.setState({ isSelectLocationOpen: false });\n  }\n\n  render() {\n    const { isSelectLocationOpen } = this.state;\n    const { eventEmitter } = this.props;\n\n    return (\n      <div className=\"top-container\">\n        <div className=\"title\">Weather Up</div>\n        <Weather {...this.props} />\n        <Manager>\n          <Reference>\n            {({ ref }) => (\n              <button\n                className=\"btn btn-select-location\"\n                ref={ref}\n                onClick={this.onToggleSelectLocation.bind(this)}\n              >\n                Select Location\n              </button>\n            )}\n          </Reference>\n          <Popper placement=\"top\">\n            {({ ref, style, placement, arrowProps }) =>\n              isSelectLocationOpen && (\n                <div\n                  className=\"popup-container\"\n                  ref={ref}\n                  style={style}\n                  data-placement={placement}\n                >\n                  <div className=\"form-container\">\n                    <label htmlFor=\"location-name\">Location Name</label>\n                    <input\n                      id=\"location-name\"\n                      type=\"text\"\n                      placeholder=\"City Name\"\n                      onChange={this.onLocationNameChange.bind(this)}\n                    />\n                    <button\n                      className=\"btn btn-select-location\"\n                      onClick={this.onSelectCity.bind(this)}\n                    >\n                      Select\n                    </button>\n                  </div>\n                  <div ref={arrowProps.ref} style={arrowProps.style} />\n                </div>\n              )\n            }\n          </Popper>\n        </Manager>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nexport default class Forcastday extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const { day } = this.props;\n    if (!day) return null;\n    return (\n      <div className=\"forcastday-container\">\n        <div className=\"image\">\n          <img src={day.condition.icon} />\n        </div>\n        <div className=\"text\">{day.avgtemp_c}</div>\n        <div className=\"muted-text\">{day.condition.text}</div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nimport \"./style.scss\";\n\nimport Forcastday from \"./forcastday\";\n\nexport default class BottomSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { forecastdays } = this.props;\n    return (\n      <div className=\"bottom-container\">\n        <div className=\"inner-container\">\n          {forecastdays &&\n            forecastdays.map((day, idx) => {\n              return <Forcastday day={day.day} key={idx} />;\n            })}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport \"./sass/app.scss\";\n\nimport TopSection from \"./components/top/index\";\nimport BottomSection from \"./components/bottom/index\";\n\nimport axios from \"axios\";\n\nconst WEATHER_KEY = \"05fa14e773434825be0193343191301\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityName: \"London\",\n      numForcastDays: 4,\n      isLoading: true\n    };\n  }\n\n  updateWeather() {\n    const { cityName, numForcastDays } = this.state;\n    const URL = `https://api.apixu.com/v1/forecast.json?key=${WEATHER_KEY}  &q=${cityName} &days=${numForcastDays}`;\n    axios\n      .get(URL)\n      .then(res => {\n        return res.data;\n      })\n      .then(data => {\n        this.setState({\n          isLoading: false,\n          temp_c: data.current.temp_c,\n          isDay: data.current.is_day,\n          text: data.current.condition.text,\n          iconURL: data.current.condition.icon,\n          forecastdays: data.forecast.forecastday\n        });\n      })\n      .catch(err => {\n        if (err) console.error(\"Cannot fetch Weather Data from API, \", err);\n      });\n  }\n\n  componentDidMount() {\n    const { eventEmitter } = this.props;\n\n    this.updateWeather();\n\n    eventEmitter.on(\"updateWeather\", data => {\n      this.setState({ cityName: data }, () => this.updateWeather());\n    });\n  }\n\n  render() {\n    const {\n      isLoading,\n      cityName,\n      temp_c,\n      isDay,\n      text,\n      iconURL,\n      forecastdays\n    } = this.state;\n\n    return (\n      <div className=\"app-container\">\n        <div className=\"main-container\">\n          {isLoading && (\n            <div className=\"top-section loading\">\n              <h1>Loading...</h1>\n              <div className=\"donut\" />\n            </div>\n          )}\n          {!isLoading && (\n            <div className=\"top-section\">\n              <TopSection\n                location={cityName}\n                temp_c={temp_c}\n                isDay={isDay}\n                text={text}\n                iconURL={iconURL}\n                eventEmitter={this.props.eventEmitter}\n              />\n            </div>\n          )}\n          <div className=\"bottom-section\">\n            <BottomSection forecastdays={forecastdays} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\nimport { EventEmitter } from \"events\";\n\nexport default class Store extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.eventEmitter = new EventEmitter();\n\n    //Main App State\n    this.state = {\n      appName: \"Weather Up\"\n    };\n  }\n\n  render() {\n    return React.Children.map(this.props.children, child => {\n      return React.cloneElement(child, {\n        ...this.state,\n        eventEmitter: this.eventEmitter\n      });\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport Store from \"./store\";\n\nReactDOM.render(\n  <Store>\n    <App />\n  </Store>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}